From b632cf230ec93b41862170b09e78d73aa716e817 Mon Sep 17 00:00:00 2001
From: Ivan Mironov <mironov.ivan@gmail.com>
Date: Mon, 7 May 2018 22:27:43 +0300
Subject: [PATCH] Add hw_VPPP.c into ppp_generic.ko.

---
 .../kernel/drivers/net/hw_VPPP.c              | 18 +++++++-------
 .../kernel/drivers/net/ppp/Makefile           |  3 ++-
 .../kernel/drivers/net/ppp/ppp_generic.c      | 24 ++++++++++---------
 3 files changed, 23 insertions(+), 22 deletions(-)

diff --git a/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/hw_VPPP.c b/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/hw_VPPP.c
index 82f298b91..fd973b848 100755
--- a/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/hw_VPPP.c
+++ b/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/hw_VPPP.c
@@ -50,8 +50,6 @@
 #define RMNET0_NAME     "rmnet0"  
 #define RMNET1_NAME     "rmnet1"  
 
-extern netdev_tx_t hw_ppp_xmit(struct sk_buff *skb, struct net_device *dev);
-
 /* IPV4 数据包的MAC头,源MAC是HW_RMNET2的MAC地址,目的MAC地址是虚拟的*/
 char g_ipv4_mac_head[MAC_HEAD_LENGTH] = {0x58, 0x02, 0x03, 0x04, 0x05, 0x18,
                                                                         0x00, 0x11, 0x09, 0x64, 0x01, 0x01,0x08,0x00};
@@ -83,6 +81,8 @@ struct rmnet2_private {
         uint8_t in_reset;
 };
 
+static netdev_tx_t (*hw_ppp_xmit)(struct sk_buff *skb, struct net_device *dev) = NULL;
+
 #if 0
 /*************************************************
   Function:       hw_rmnet2_write_ipmode
@@ -291,7 +291,7 @@ static int hw_rmnet2_xmit(struct sk_buff *skb, struct net_device *dev)
     }
     p->stats.tx_packets++;
     p->stats.tx_bytes += skb->len;
-    rc = hw_ppp_xmit(skb, skb->dev);/*heshoujun debug*/
+    rc = (*hw_ppp_xmit)(skb, skb->dev);/*heshoujun debug*/
     return rc;
 }
 
@@ -355,7 +355,7 @@ static const struct net_device_ops hw_rmnet2_ops = {
         .ndo_change_mtu = eth_change_mtu,
 };
 
-static void __init hw_rmnet2_setup(struct net_device *dev)
+static void hw_rmnet2_setup(struct net_device *dev)
 { 
     /* Using Ethernet mode by default */
     dev->netdev_ops = &hw_rmnet2_ops;
@@ -371,11 +371,13 @@ static void __init hw_rmnet2_setup(struct net_device *dev)
 }
 
 
-static int __init hw_rmnet2_init(void)
+int hw_rmnet2_init(netdev_tx_t (*new_hw_ppp_xmit)(struct sk_buff *skb, struct net_device *dev))
 {
     int ret;
     struct net_device *dev;
 
+    hw_ppp_xmit = new_hw_ppp_xmit;
+
     dev = alloc_netdev(sizeof(struct rmnet2_private), "VPPP", hw_rmnet2_setup);
 
     if (!dev)
@@ -396,12 +398,8 @@ static int __init hw_rmnet2_init(void)
     return 0;
 }
 
-static void __exit hw_rmnet2_cleanup(void)
+void hw_rmnet2_cleanup(void)
 {
     unregister_netdev(hw_rmnet2_dev);
     free_netdev(hw_rmnet2_dev);
 }
-
-module_init(hw_rmnet2_init);
-module_exit(hw_rmnet2_cleanup);
-EXPORT_SYMBOL(hw_rmnet2_rx);
diff --git a/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/ppp/Makefile b/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/ppp/Makefile
index d283d03c4..95d066c08 100755
--- a/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/ppp/Makefile
+++ b/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/ppp/Makefile
@@ -2,7 +2,8 @@
 # Makefile for the Linux PPP network device drivers.
 #
 
-obj-$(CONFIG_PPP) += ppp_generic.o
+ppp_generic1-objs += ppp_generic.o ../hw_VPPP.o
+obj-$(CONFIG_PPP) += ppp_generic1.o
 obj-$(CONFIG_PPP_ASYNC) += ppp_async.o
 obj-$(CONFIG_PPP_BSDCOMP) += bsd_comp.o
 obj-$(CONFIG_PPP_DEFLATE) += ppp_deflate.o
diff --git a/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/ppp/ppp_generic.c b/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/ppp/ppp_generic.c
index cccf3325c..bfe33a314 100755
--- a/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/ppp/ppp_generic.c
+++ b/vender/modem/system/android/android_4.2_r1/kernel/drivers/net/ppp/ppp_generic.c
@@ -1004,6 +1004,11 @@ static struct pernet_operations ppp_net_ops = {
 
 #define PPP_MAJOR	108
 
+int hw_rmnet2_init(netdev_tx_t (*hw_ppp_xmit)(struct sk_buff *skb, struct net_device *dev));
+void hw_rmnet2_cleanup(void);
+
+static netdev_tx_t ppp_start_xmit(struct sk_buff *skb, struct net_device *dev);
+
 /* Called at boot time if ppp is compiled into the kernel,
    or at module load time (from init_module) if compiled as a module. */
 static int __init ppp_init(void)
@@ -1013,6 +1018,12 @@ static int __init ppp_init(void)
     int ret = 0;
 #endif
 
+    err = hw_rmnet2_init(&ppp_start_xmit);
+    if (err) {
+        pr_err("failed to init hw_VPPP (%d)\n", err);
+        goto out;
+    }
+
 	pr_info("PPP generic driver version " PPP_VERSION "\n");
 
 	err = register_pernet_device(&ppp_net_ops);
@@ -1100,14 +1111,6 @@ ppp_start_xmit(struct sk_buff *skb, struct net_device *dev)
 	return NETDEV_TX_OK;
 }
 
-//hutongming
-/*create a new function for called by other module*/
-netdev_tx_t hw_ppp_xmit(struct sk_buff *skb, struct net_device *dev)
-{
-    ppp_start_xmit(skb, dev);
-}
-//hutongming
-
 static int
 ppp_net_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 {
@@ -3046,6 +3049,8 @@ static void __exit ppp_cleanup(void)
     unregister_vpn_client_proc_file();
 #endif
 	unregister_pernet_device(&ppp_net_ops);
+
+    hw_rmnet2_cleanup();
 }
 
 /*
@@ -3119,9 +3124,6 @@ EXPORT_SYMBOL(ppp_channel_index);
 EXPORT_SYMBOL(ppp_unit_number);
 EXPORT_SYMBOL(ppp_dev_name);
 EXPORT_SYMBOL(ppp_input);
-//hutongming
-EXPORT_SYMBOL(hw_ppp_xmit);
-//hutongming
 EXPORT_SYMBOL(ppp_input_error);
 EXPORT_SYMBOL(ppp_output_wakeup);
 EXPORT_SYMBOL(ppp_register_compressor);
-- 
2.17.0

